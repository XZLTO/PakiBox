import { app, BrowserWindow, dialog, ipcMain, ipcRenderer } from 'electron';
import { checkAdminRights } from './libs/utils';
import { createConfig, deleteConfig, getConfigs, SetConfigMode } from './libs/config';
import { electron } from 'process';
import { SingBoxManager } from './libs/singbox';
import { InBoundMode } from './libs/data';
const path = require('node:path');

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const { updateElectronApp } = require('update-electron-app');
updateElectronApp();

const singBoxManager = new SingBoxManager(path.join(process.resourcesPath, 'sing-box.exe'));
console.log(path.join(process.resourcesPath, 'sing-box.exe'))

let mainWindow: BrowserWindow;

if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 700,
    width: 700,
    minHeight: 700,
    minWidth: 700,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.setMenu(null);
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.on('closed', function () {
    mainWindow = null
  });
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    singBoxManager.stop();
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


if (process.defaultApp) {
  if (process.argv.length >= 2) {
    app.setAsDefaultProtocolClient('sing-box', process.execPath, [path.resolve(process.argv[1])])
  }
} else {
  app.setAsDefaultProtocolClient('sing-box')
}

DeepLink(process.argv[1])

const gotTheLock = app.requestSingleInstanceLock()
if (!gotTheLock) {
  app.quit()
} else {
  app.on('second-instance', async (event, commandLine, workingDirectory) => {
    if (mainWindow) {
      if (mainWindow.isMinimized()) mainWindow.restore()
      mainWindow.focus()
    }

    DeepLink(commandLine.pop());
  })

  app.whenReady().then(() => {
    createWindow()
  })
}

async function DeepLink(line: string) {
  try {
    const url = new URL(line);
    if (url.host == "import-remote-profile") {
      const configURL = url.searchParams.get("url")
      const configName = decodeURIComponent(url.hash.slice(1)) || (new Date()).getTime().toString(36);
      if (configURL) {
        await createConfig(configURL, configName)
        await SetConfigMode(configName, InBoundMode.TUN);
        mainWindow?.webContents.send("get-configs", await getConfigs(), configName)
      }
      else {
        mainWindow?.webContents.send("sing-log", `[ERROR] Invalid url: ${url}`)
      }
    }
  } catch (err) {
    console.log(`${Date().toString()}: ${err}`);
  }
}

ipcMain.on('get-configs', async () => {
  if (mainWindow) {
    mainWindow.webContents.send('get-configs', await getConfigs(), null)
  }
})

ipcMain.on('delete-config', async (_, name: string) => {
  await deleteConfig(name)
  if (mainWindow) {
    mainWindow.webContents.send('get-configs', await getConfigs(), null)
  }
})

ipcMain.on('sing-runner', async (_, config: string) => {
  singBoxManager.isRunning() ? singBoxManager.stop() : singBoxManager.start(config);
})

ipcMain.on('getVersion', (_, config: string) => {
  if (mainWindow) {
    mainWindow.webContents.send('getVersion', app.getVersion())
  }
})

singBoxManager.onLog((data) => {
  console.log('[SingBox]', data);
  if (mainWindow)
    mainWindow.webContents.send("sing-log", data);
});

singBoxManager.onStatus((data) => {
  if (mainWindow)
    mainWindow.webContents.send("sing-status", data);
})

